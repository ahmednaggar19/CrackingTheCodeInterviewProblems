#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
#include <queue>
using namespace std;

class MyQueue {
    private:
    stack<int> stack_newest_on_top, stack_oldest_on_top;   
    bool dequeueing = false;
    
    void empty_old_in_new() {
        while(!stack_oldest_on_top.empty()) {
            int top = stack_oldest_on_top.top();
            stack_oldest_on_top.pop();
            stack_newest_on_top.push(top);
        }
       return;
    }
    
    void empty_new_in_old() {
        while(!stack_newest_on_top.empty()) {
            int top = stack_newest_on_top.top();
            stack_newest_on_top.pop();
            stack_oldest_on_top.push(top);
        }
        return;
    }
    
    public:
        void push(int x) {
            stack_newest_on_top.push(x);
        }

        void pop() {
            if (stack_oldest_on_top.empty()) {
                empty_new_in_old();
            }
            stack_oldest_on_top.pop();
            return;
        }

        int front() {
            if (stack_oldest_on_top.empty()) {
                empty_new_in_old();
            }
            if (stack_oldest_on_top.empty()) return 0;
            int front = stack_oldest_on_top.top();
            return front;
        }
};

int main() {
    MyQueue q1;
    int q, type, x;
    cin >> q;
    
    for(int i = 0; i < q; i++) {
        cin >> type;
        if(type == 1) {
            cin >> x;
            q1.push(x);
        }
        else if(type == 2) {
            q1.pop();
        }
        else cout << q1.front() << endl;
    }
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}
