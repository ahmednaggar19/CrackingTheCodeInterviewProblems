/**
* Time Complexity : O(N)
* Space Complexity : O(N)
*/

LinkedListNode reverseLinkedList (LinkedListNode head) {
	LinkedListNode reversedHead = null;
	LinkedListNode newNode = new LinkedListNode (head.data);
	while (head.next != null) {
		LinkedListNode newNextNode = new LinkedListNode (head.next.data);
		newNextNode.next = newNode;
		reversedHead = newNextNode;
		newNode = newNextNode;
		head = head.next;
	}
	return reversedHead; 
}

boolean compareLinkedLists (LinkedListNode head1, LinkedListNode head2) {
	while (head1 != null && head2 != null) {
		if (head1.data != head2.data) {
			return false;
		}
	}
	if (head1 == null && head2 == null) {
		return false;
	}
	return true;
}

boolean isPalindrome (LinkedListNode head) {
	LinkedListNode reversedHead = reverseLinkedList (head);
	return compareLinkedLists (head, reversedHead);
}